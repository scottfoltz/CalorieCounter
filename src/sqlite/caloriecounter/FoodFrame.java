/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sqlite.caloriecounter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import net.proteanit.sql.DbUtils;
import java.util.*;
import java.text.*;


/**
 *
 * @author scottfoltz
 */
public class FoodFrame extends javax.swing.JFrame {
    
    private Connection conn = null;
    private PreparedStatement prep = null;
    private ResultSet rs = null;
    private String newCategory = null;
    private String currentCategory = null;
    private String userFood = null;
    private int currentFood = 0;

    public int getUserID(){
        
        int userID = 0;
        
        try{

            String query2 = "SELECT user.userid\n" +
                            "FROM user\n" +
                            "WHERE user.username=?;";
            PreparedStatement prep = conn.prepareStatement(query2);
            prep.setString(1,userFood);

            ResultSet rs = prep.executeQuery();

            while(rs.next()){
                userID = rs.getInt("userID");
            }
            
            rs.close();
            prep.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            e.printStackTrace();

        }
        
        
        return userID;
        
    }
    
    
    public void refreshTable() {
        
        //conn = SQLiteDriver.connectDB();
        try {
            String query = "SELECT Food.foodID, Food.Name, Food.Calories, Food.CategoryID\n" +
                           "FROM Food, FoodCategory\n" +
                           "WHERE Food.CategoryID = FoodCategory.categoryID\n" +
                           "AND FoodCategory.name =?";
            PreparedStatement prep = conn.prepareStatement(query);
            prep.setString(1,currentCategory);

            ResultSet rs = prep.executeQuery();
            
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            
            rs.close();
            prep.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
            e.printStackTrace();
        }
        
        
    }    
    
    /**
     * Creates new form FoodFrame
     */
    public FoodFrame(String username) {
        userFood = username;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnEatFood = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        btnNewFood = new javax.swing.JButton();
        btnUpdateTable = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(275, 300));
        setPreferredSize(new java.awt.Dimension(275, 300));
        setSize(new java.awt.Dimension(275, 300));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        btnEatFood.setText("Eat Food");
        btnEatFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEatFoodActionPerformed(evt);
            }
        });

        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        btnNewFood.setText("New Food");
        btnNewFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewFoodActionPerformed(evt);
            }
        });

        btnUpdateTable.setText("Update");
        btnUpdateTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdateTable))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNewFood, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEatFood, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEatFood)
                    .addComponent(btnNewFood))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:

    }//GEN-LAST:event_formWindowActivated

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        newCategory = (String)jComboBox1.getSelectedItem();
        currentCategory = newCategory;
        
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void btnUpdateTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTableActionPerformed
        // TODO add your handling code here:
        
        conn = SQLiteDriver.connectDB();

        try {
            String query = "SELECT Food.foodID,Food.Name, Food.Calories, Food.CategoryID\n" +
"                           FROM Food, FoodCategory\n" +
"                           WHERE Food.CategoryID = FoodCategory.categoryID\n" +
"                           AND FoodCategory.name =?";
            prep = conn.prepareStatement(query);
            prep.setString(1,newCategory);

            rs = prep.executeQuery();
            
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
            e.printStackTrace();
        }finally{
        try{
            rs.close();
            prep.close();
            //conn.close(); //keep open for another query
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            e.printStackTrace();

        }}
        
        
    }//GEN-LAST:event_btnUpdateTableActionPerformed

    private void btnNewFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewFoodActionPerformed
        // TODO add your handling code here:
           
        conn = SQLiteDriver.connectDB();

        try {
            String newFood = (String)JOptionPane.showInputDialog(null,"Enter in a name of your new Food");
            int newFoodCalAmount = Integer.parseInt(JOptionPane.showInputDialog(null,"How many calories?"));
            int newFoodCategory = Integer.parseInt(JOptionPane.showInputDialog(null,"What's the Category ID(shown in the table)?"));
   
            if(newFood  != null){
                String query3 = "INSERT INTO Food(Name, Calories,CategoryID) values(?,?,?)";
                prep = conn.prepareStatement(query3);
                prep.setString(1,newFood);
                prep.setInt(2,newFoodCalAmount);
                prep.setInt(3, newFoodCategory);
                prep.executeUpdate();

                refreshTable();

                
            }   
            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
            e.printStackTrace();
        }finally{
        try{
            rs.close();
            prep.close();
            conn.close(); 
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            e.printStackTrace();

        }}
        
        
        

        
    }//GEN-LAST:event_btnNewFoodActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        //get the food id of the food selected
        try {
            int row = jTable1.getSelectedRow();
            String FoodID_ = (jTable1.getModel().getValueAt(row,0)).toString();
            String query = "SELECT Food.foodID FROM Food WHERE FoodID='"+FoodID_+" '";
            prep = conn.prepareStatement(query);
            ResultSet rs = prep.executeQuery();
            
            while(rs.next()){
                currentFood = rs.getInt(1);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
            e.printStackTrace();
        }finally{
        try{
            rs.close();
            prep.close();
            //conn.close(); //keep open for another query
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            e.printStackTrace();

        }}
        
        JOptionPane.showMessageDialog(null, currentFood);
    }//GEN-LAST:event_jTable1MouseClicked

    private String getDateTime() {
        SimpleDateFormat dateFormat = new SimpleDateFormat(
                "yyyy-MM-dd HH:mm:ss", Locale.getDefault());
        Date date = new Date();
        return dateFormat.format(date);
    }
    
    
    private void btnEatFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEatFoodActionPerformed
        // TODO add your handling code here:
        
        //lets create a new food category
        conn = SQLiteDriver.connectDB();
        try{
                String query3 = "INSERT INTO UserEatsFood(UserID,FoodID,Date) values(?,?,?)";
                PreparedStatement prep = conn.prepareStatement(query3);
                prep.setInt(1,getUserID());
                prep.setInt(2,currentFood);
                prep.setString(3,getDateTime());

                prep.executeUpdate(); 
                
                dispose();
                
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            e.printStackTrace();

        }finally{
        try{
            prep.close();
            conn.close();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            e.printStackTrace();//was getting errors, so this was how i debugged
        }}
        
        
        
        
    }//GEN-LAST:event_btnEatFoodActionPerformed

    
    public void foodButtonHelper(String category){
        conn = SQLiteDriver.connectDB();
        currentCategory = category;
        try {
            String query = "SELECT Food.foodID, Food.Name, Food.Calories, Food.CategoryID\n" +
                           "FROM Food, FoodCategory\n" +
                           "WHERE Food.CategoryID = FoodCategory.categoryID\n" +
                           "AND FoodCategory.name =?";
            prep = conn.prepareStatement(query);
            prep.setString(1,category);

            rs = prep.executeQuery();
            
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
            e.printStackTrace();
        }finally{
        try{
            rs.close();
            prep.close();
            //conn.close(); //keep open for another query
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            e.printStackTrace();

        }}
        
        try {
            String query2 = "SELECT * FROM FoodCategory;";
            prep = conn.prepareStatement(query2);
            rs = prep.executeQuery();

            while(rs.next()){
                String name = rs.getString("name");
                jComboBox1.addItem(name);
            }            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
            e.printStackTrace();
        }finally{
        try{
            rs.close();
            prep.close();
            //conn.close();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            e.printStackTrace();

        }}
        
    }
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEatFood;
    private javax.swing.JButton btnNewFood;
    private javax.swing.JButton btnUpdateTable;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
